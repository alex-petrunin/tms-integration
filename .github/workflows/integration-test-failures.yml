name: Integration Test Failures Demo

on:
  workflow_dispatch:
    inputs:
      triggerSource:
        description: "Source of trigger (YT issue ID, test repo, etc.)"
        required: false
        default: "automated_test_run"
      testCaseId:
        description: "Original Test Case ID"
        required: true
      testRunId:
        description: "Test Run ID of a Test Case"
        required: true

jobs:
  integration-test-failures:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show test context
        run: |
          echo "🧪 Integration Test Failures Demo Starting..."
          echo "Test Case ID: ${{ github.event.inputs.testCaseId }}"
          echo "Test Run ID: ${{ github.event.inputs.testRunId }}"
          echo "Trigger Source: ${{ github.event.inputs.triggerSource }}"
          echo "Repository: ${{ github.repository }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          echo "📦 Installing test dependencies..."
          npm install --silent

      - name: Run Integration Tests with Service Failures
        id: integration_tests
        continue-on-error: true
        run: |
          echo "🚀 Starting integration test suite with external services..."
          echo "Initializing test environment..."
          sleep 2
          
          # Initialize test tracking
          TOTAL_TESTS=8
          PASSED_TESTS=0
          FAILED_TESTS=0
          FAILED_TEST_NAMES=()
          ERROR_DETAILS=""
          TEST_LOGS=""
          
          echo "Testing Database Integration..."
          
          # Test 1: Database connection - PASS
          echo "✅ Test 1: PostgreSQL connection establishment - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          TEST_LOGS+="[INFO] Connected to PostgreSQL at localhost:5432\n"
          TEST_LOGS+="[DEBUG] Connection pool initialized with 10 connections\n"
          
          # Test 2: Database migration - FAIL
          echo "❌ Test 2: Database schema migration - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Database schema migration")
          ERROR_DETAILS+="Test 2 FAILED: Schema migration\n"
          ERROR_DETAILS+="  Expected: All migration scripts executed successfully\n"
          ERROR_DETAILS+="  Actual: Migration 003_add_user_preferences.sql failed\n"
          ERROR_DETAILS+="  PostgresError: column 'user_id' of relation 'preferences' does not exist\n"
          ERROR_DETAILS+="  SQL State: 42703\n"
          ERROR_DETAILS+="  at executeQuery (migration.js:67)\n"
          ERROR_DETAILS+="  at runMigration (migration.js:34)\n\n"
          TEST_LOGS+="[ERROR] Migration failed at step 3/5\n"
          TEST_LOGS+="[ERROR] SQL: ALTER TABLE preferences ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id)\n"
          TEST_LOGS+="[DEBUG] Available columns in preferences table: id, setting_key, setting_value, created_at\n"
          TEST_LOGS+="[DEBUG] Missing prerequisite: user_id column should be added in migration 002\n"
          
          # Test 3: Data seeding - FAIL
          echo "❌ Test 3: Test data seeding - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Test data seeding")
          ERROR_DETAILS+="Test 3 FAILED: Data seeding\n"
          ERROR_DETAILS+="  Expected: 1000 test records inserted successfully\n"
          ERROR_DETAILS+="  Actual: Only 247 records inserted before failure\n"
          ERROR_DETAILS+="  ConstraintError: Check constraint 'valid_email' violated\n"
          ERROR_DETAILS+="  Invalid email format in seed data: 'invalid-email-248'\n"
          ERROR_DETAILS+="  at insertSeedData (seeder.js:89)\n\n"
          TEST_LOGS+="[INFO] Seeding started with 1000 records\n"
          TEST_LOGS+="[INFO] Successfully inserted records 1-247\n"
          TEST_LOGS+="[ERROR] Constraint violation at record 248: email='invalid-email-248'\n"
          TEST_LOGS+="[DEBUG] Email validation regex: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'\n"
          
          echo "Testing Redis Cache Integration..."
          
          # Test 4: Redis connection - PASS
          echo "✅ Test 4: Redis connection and basic operations - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          TEST_LOGS+="[INFO] Connected to Redis at localhost:6379\n"
          TEST_LOGS+="[DEBUG] Redis info: version=6.2.6, memory_usage=1.2MB\n"
          
          # Test 5: Cache invalidation - FAIL
          echo "❌ Test 5: Cache invalidation strategy - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Cache invalidation strategy")
          ERROR_DETAILS+="Test 5 FAILED: Cache invalidation\n"
          ERROR_DETAILS+="  Expected: Cache entries invalidated after user update\n"
          ERROR_DETAILS+="  Actual: Stale cache data returned after 5 minutes\n"
          ERROR_DETAILS+="  CacheError: Invalidation pattern 'user:*:profile' not matching 'user:123:profile:extended'\n"
          ERROR_DETAILS+="  at invalidateCache (cache.js:156)\n"
          ERROR_DETAILS+="  Pattern matching failed for extended profile keys\n\n"
          TEST_LOGS+="[INFO] User 123 profile updated in database\n"
          TEST_LOGS+="[DEBUG] Attempting cache invalidation with pattern: 'user:*:profile'\n"
          TEST_LOGS+="[DEBUG] Found cache keys: ['user:123:profile', 'user:123:profile:extended', 'user:123:profile:settings']\n"
          TEST_LOGS+="[ERROR] Pattern 'user:*:profile' only matched 1/3 keys\n"
          TEST_LOGS+="[ERROR] Stale data served from key: 'user:123:profile:extended'\n"
          
          echo "Testing External API Integration..."
          
          # Test 6: Payment gateway - FAIL
          echo "❌ Test 6: Payment gateway integration - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Payment gateway integration")
          ERROR_DETAILS+="Test 6 FAILED: Payment processing\n"
          ERROR_DETAILS+="  Expected: Payment processed successfully with confirmation\n"
          ERROR_DETAILS+="  Actual: HTTP 503 Service Unavailable from payment gateway\n"
          ERROR_DETAILS+="  NetworkError: Connection timeout after 30 seconds\n"
          ERROR_DETAILS+="  Gateway URL: https://api.stripe.com/v1/charges\n"
          ERROR_DETAILS+="  at processPayment (payment.js:78)\n"
          ERROR_DETAILS+="  at POST /api/checkout (checkout.js:45)\n\n"
          TEST_LOGS+="[INFO] Initiating payment for amount: $99.99\n"
          TEST_LOGS+="[DEBUG] Payment method: card_1234567890\n"
          TEST_LOGS+="[DEBUG] Sending request to Stripe API...\n"
          TEST_LOGS+="[WARN] Request timeout after 15s, retrying...\n"
          TEST_LOGS+="[WARN] Retry 1/3 failed after 20s\n"
          TEST_LOGS+="[WARN] Retry 2/3 failed after 25s\n"
          TEST_LOGS+="[ERROR] All retries exhausted, payment failed\n"
          TEST_LOGS+="[ERROR] Gateway response: 503 Service Unavailable\n"
          
          # Test 7: Email service - FAIL
          echo "❌ Test 7: Email notification service - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Email notification service")
          ERROR_DETAILS+="Test 7 FAILED: Email delivery\n"
          ERROR_DETAILS+="  Expected: Welcome email sent to new user\n"
          ERROR_DETAILS+="  Actual: SMTP authentication failed\n"
          ERROR_DETAILS+="  SMTPError: 535 Authentication failed - invalid credentials\n"
          ERROR_DETAILS+="  SMTP Server: smtp.gmail.com:587\n"
          ERROR_DETAILS+="  at sendEmail (mailer.js:34)\n"
          ERROR_DETAILS+="  at sendWelcomeEmail (notifications.js:12)\n\n"
          TEST_LOGS+="[INFO] Preparing welcome email for user: john.doe@example.com\n"
          TEST_LOGS+="[DEBUG] Email template: welcome_new_user.html\n"
          TEST_LOGS+="[DEBUG] SMTP config: host=smtp.gmail.com, port=587, secure=false\n"
          TEST_LOGS+="[ERROR] SMTP authentication failed\n"
          TEST_LOGS+="[ERROR] Username: app-notifications@company.com\n"
          TEST_LOGS+="[ERROR] Check app password configuration\n"
          
          # Test 8: File upload service - PASS
          echo "✅ Test 8: File upload to cloud storage - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          TEST_LOGS+="[INFO] File uploaded successfully to AWS S3\n"
          TEST_LOGS+="[DEBUG] Bucket: test-uploads, Key: user-123/avatar.jpg, Size: 2.4MB\n"
          
          # Calculate success rate
          SUCCESS_RATE=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
          
          echo ""
          echo "📊 Integration Test Results Summary:"
          echo "   Total Tests: $TOTAL_TESTS"
          echo "   Passed: $PASSED_TESTS"
          echo "   Failed: $FAILED_TESTS"
          echo "   Success Rate: ${SUCCESS_RATE}%"
          echo ""
          echo "💥 Integration test suite completed with $FAILED_TESTS critical failures"
          echo "🔧 External service dependencies caused multiple test failures"
          
          # Set outputs for webhook
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          # Convert array to JSON format for failed test names
          if [ ${#FAILED_TEST_NAMES[@]} -gt 0 ]; then
            FAILED_NAMES_JSON=$(printf '%s\n' "${FAILED_TEST_NAMES[@]}" | jq -R . | jq -s .)
            echo "failed_test_names=$FAILED_NAMES_JSON" >> $GITHUB_OUTPUT
          else
            echo "failed_test_names=[]" >> $GITHUB_OUTPUT
          fi
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          echo "test_logs=$TEST_LOGS" >> $GITHUB_OUTPUT
          
          # Exit with error since critical tests failed
          exit 1

      - name: Notify YouTrack TMS
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔔 Notifying YouTrack TMS about integration test results...');
            
            // Determine the correct status based on test results
            const testStepOutcome = '${{ steps.integration_tests.outcome }}';
            const failedTests = '${{ steps.integration_tests.outputs.failed_tests }}';
            let testStatus = 'success';
            
            if (testStepOutcome === 'failure' || (failedTests && parseInt(failedTests) > 0)) {
              testStatus = 'failure';
            }
            
            const body = {
              repository: process.env.GITHUB_REPOSITORY,
              run_id: process.env.GITHUB_RUN_ID,
              status: testStatus,
              event: process.env.GITHUB_EVENT_NAME,
              triggerSource: '${{ github.event.inputs.triggerSource }}',
              testCaseId: '${{ github.event.inputs.testCaseId }}',
              testRunId: '${{ github.event.inputs.testRunId }}',
              timestamp: new Date().toISOString()
            };

            // Add comprehensive test results
            const totalTests = '${{ steps.integration_tests.outputs.total_tests }}';
            if (totalTests) {
              const passedTests = '${{ steps.integration_tests.outputs.passed_tests }}';
              const failedTests = '${{ steps.integration_tests.outputs.failed_tests }}';
              const successRate = '${{ steps.integration_tests.outputs.success_rate }}';
              
              body.testResults = {
                total: parseInt(totalTests),
                passed: parseInt(passedTests),
                failed: parseInt(failedTests),
                successRate: parseInt(successRate)
              };
              
              // Add failed test names
              const failedTestNames = '${{ steps.integration_tests.outputs.failed_test_names }}';
              if (failedTestNames && failedTestNames !== '[]' && failedTestNames.trim() !== '') {
                try {
                  body.testResults.failedTests = JSON.parse(failedTestNames);
                } catch (e) {
                  console.warn('Failed to parse failed test names:', e);
                  console.warn('Raw failed test names value:', failedTestNames);
                }
              }
              
              // Add detailed error information
              const errorDetails = '${{ steps.integration_tests.outputs.error_details }}';
              if (errorDetails) {
                body.testResults.errorDetails = errorDetails;
              }
              
              // Add comprehensive test logs
              const testLogs = '${{ steps.integration_tests.outputs.test_logs }}';
              if (testLogs) {
                body.testResults.logs = testLogs;
              }
            }

            console.log('📦 Webhook payload:', JSON.stringify(body, null, 2));

            try {
              const res = await fetch(process.env.CALLBACK_URL, {
                method: 'POST',
                headers: { 
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${process.env.YOUTRACK_TOKEN}`
                },
                body: JSON.stringify(body)
              });

              if (!res.ok) {
                const text = await res.text();
                console.error(`❌ Webhook failed: ${res.status} ${res.statusText} - ${text}`);
                core.setFailed(`Webhook failed: ${res.status} ${res.statusText} - ${text}`);
              } else {
                console.log('✅ Webhook delivered successfully to YouTrack TMS');
                const responseText = await res.text();
                console.log('📄 Response:', responseText);
              }
            } catch (error) {
              console.error(`💥 Webhook delivery error: ${error.message}`);
              core.setFailed(`Webhook delivery error: ${error.message}`);
            }
        env:
          CALLBACK_URL: ${{ secrets.WEBHOOK_URL }}
          YOUTRACK_TOKEN: ${{ secrets.YOUTRACK_TOKEN }}
