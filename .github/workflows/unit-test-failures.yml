name: Unit Test Failures Demo

on:
  workflow_dispatch:
    inputs:
      triggerSource:
        description: "Source of trigger (YT issue ID, test repo, etc.)"
        required: false
        default: "automated_test_run"
      testCaseId:
        description: "Original Test Case ID"
        required: true
      testRunId:
        description: "Test Run ID of a Test Case"
        required: true

jobs:
  unit-test-failures:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show test context
        run: |
          echo "🧪 Unit Test Failures Demo Starting..."
          echo "Test Case ID: ${{ github.event.inputs.testCaseId }}"
          echo "Test Run ID: ${{ github.event.inputs.testRunId }}"
          echo "Trigger Source: ${{ github.event.inputs.triggerSource }}"
          echo "Repository: ${{ github.repository }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Unit Tests with Detailed Failures
        id: unit_tests
        continue-on-error: true
        run: |
          echo "🚀 Starting comprehensive unit test suite..."
          echo "Setting up test environment..."
          sleep 1
          
          # Initialize test tracking
          TOTAL_TESTS=12
          PASSED_TESTS=0
          FAILED_TESTS=0
          FAILED_TEST_NAMES=()
          ERROR_DETAILS=""
          TEST_LOGS=""
          
          echo "Running Authentication Module Tests..."
          
          # Test 1: Login validation - PASS
          echo "✅ Test 1: Valid login credentials - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          # Test 2: Password validation - FAIL
          echo "❌ Test 2: Password strength validation - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Password strength validation")
          ERROR_DETAILS+="Test 2 FAILED: Password validation\n"
          ERROR_DETAILS+="  Expected: Password must contain uppercase, lowercase, number, and special character\n"
          ERROR_DETAILS+="  Actual: Weak password 'password123' was accepted\n"
          ERROR_DETAILS+="  AssertionError: Password validation should reject weak passwords\n"
          ERROR_DETAILS+="  at validatePassword (auth.js:42)\n"
          ERROR_DETAILS+="  at Object.test (auth.test.js:15)\n\n"
          TEST_LOGS+="[ERROR] Password validation failed for input: 'password123'\n"
          TEST_LOGS+="[DEBUG] Validation rules: uppercase=false, lowercase=true, number=true, special=false\n"
          
          # Test 3: Session timeout - FAIL
          echo "❌ Test 3: Session timeout handling - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Session timeout handling")
          ERROR_DETAILS+="Test 3 FAILED: Session timeout\n"
          ERROR_DETAILS+="  Expected: Session should expire after 30 minutes\n"
          ERROR_DETAILS+="  Actual: Session remained active after 35 minutes\n"
          ERROR_DETAILS+="  TimeoutError: Session cleanup not triggered\n"
          ERROR_DETAILS+="  at checkSessionExpiry (session.js:78)\n\n"
          TEST_LOGS+="[WARN] Session cleanup job not executed at expected time\n"
          TEST_LOGS+="[ERROR] Session ID abc123 still active after timeout period\n"
          
          echo "Running Data Validation Module Tests..."
          
          # Test 4: Email validation - PASS
          echo "✅ Test 4: Email format validation - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          # Test 5: Phone number validation - FAIL
          echo "❌ Test 5: Phone number format validation - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Phone number format validation")
          ERROR_DETAILS+="Test 5 FAILED: Phone number validation\n"
          ERROR_DETAILS+="  Expected: International format +1-555-123-4567 should be valid\n"
          ERROR_DETAILS+="  Actual: ValidationError thrown for valid international format\n"
          ERROR_DETAILS+="  RegexError: Pattern '^[0-9]{10}$' too restrictive\n"
          ERROR_DETAILS+="  at validatePhone (validator.js:23)\n\n"
          TEST_LOGS+="[ERROR] Phone validation regex failed for: '+1-555-123-4567'\n"
          TEST_LOGS+="[DEBUG] Current regex: '^[0-9]{10}$' (US format only)\n"
          
          # Test 6: Date validation - PASS
          echo "✅ Test 6: Date range validation - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          echo "Running API Integration Tests..."
          
          # Test 7: GET endpoint - PASS
          echo "✅ Test 7: GET /api/users endpoint - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          # Test 8: POST endpoint - FAIL
          echo "❌ Test 8: POST /api/users endpoint - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("POST /api/users endpoint")
          ERROR_DETAILS+="Test 8 FAILED: POST endpoint validation\n"
          ERROR_DETAILS+="  Expected: HTTP 201 Created with user object\n"
          ERROR_DETAILS+="  Actual: HTTP 500 Internal Server Error\n"
          ERROR_DETAILS+="  DatabaseError: Duplicate key violation on email field\n"
          ERROR_DETAILS+="  at insertUser (database.js:156)\n"
          ERROR_DETAILS+="  at POST /api/users (routes.js:34)\n\n"
          TEST_LOGS+="[ERROR] Database constraint violation: duplicate email 'test@example.com'\n"
          TEST_LOGS+="[DEBUG] SQL: INSERT INTO users (email, name) VALUES ('test@example.com', 'Test User')\n"
          TEST_LOGS+="[ERROR] SQLSTATE[23000]: Integrity constraint violation\n"
          
          # Test 9: PUT endpoint - FAIL
          echo "❌ Test 9: PUT /api/users/:id endpoint - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("PUT /api/users/:id endpoint")
          ERROR_DETAILS+="Test 9 FAILED: PUT endpoint authorization\n"
          ERROR_DETAILS+="  Expected: HTTP 200 OK with updated user\n"
          ERROR_DETAILS+="  Actual: HTTP 403 Forbidden\n"
          ERROR_DETAILS+="  AuthorizationError: User cannot modify other user's data\n"
          ERROR_DETAILS+="  at checkPermissions (auth.js:89)\n\n"
          TEST_LOGS+="[WARN] Authorization check failed for user ID 123 trying to modify user ID 456\n"
          TEST_LOGS+="[DEBUG] Required permission: 'user.modify.own' or 'user.modify.all'\n"
          TEST_LOGS+="[DEBUG] User permissions: ['user.read', 'user.modify.own']\n"
          
          # Test 10: DELETE endpoint - PASS
          echo "✅ Test 10: DELETE /api/users/:id endpoint - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          echo "Running Business Logic Tests..."
          
          # Test 11: Order calculation - FAIL
          echo "❌ Test 11: Order total calculation with tax - FAILED"
          FAILED_TESTS=$((FAILED_TESTS + 1))
          FAILED_TEST_NAMES+=("Order total calculation with tax")
          ERROR_DETAILS+="Test 11 FAILED: Tax calculation\n"
          ERROR_DETAILS+="  Expected: Order total $107.50 (subtotal $100.00 + tax $7.50)\n"
          ERROR_DETAILS+="  Actual: Order total $100.75 (incorrect tax calculation)\n"
          ERROR_DETAILS+="  MathError: Tax rate 7.5% applied incorrectly\n"
          ERROR_DETAILS+="  at calculateTax (order.js:45)\n"
          ERROR_DETAILS+="  Formula used: subtotal * 0.075 instead of subtotal * 1.075\n\n"
          TEST_LOGS+="[ERROR] Tax calculation mismatch: expected 7.50, got 0.75\n"
          TEST_LOGS+="[DEBUG] Subtotal: 100.00, Tax rate: 7.5%, Applied formula: 100.00 * 0.0075\n"
          TEST_LOGS+="[DEBUG] Correct formula should be: 100.00 * 0.075\n"
          
          # Test 12: Inventory check - PASS
          echo "✅ Test 12: Inventory availability check - PASSED"
          PASSED_TESTS=$((PASSED_TESTS + 1))
          
          # Calculate success rate
          SUCCESS_RATE=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
          
          echo ""
          echo "📊 Final Test Results Summary:"
          echo "   Total Tests: $TOTAL_TESTS"
          echo "   Passed: $PASSED_TESTS"
          echo "   Failed: $FAILED_TESTS"
          echo "   Success Rate: ${SUCCESS_RATE}%"
          echo ""
          echo "💥 Test suite completed with $FAILED_TESTS failures"
          
          # Set outputs for webhook
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          # Convert array to JSON format for failed test names
          if [ ${#FAILED_TEST_NAMES[@]} -gt 0 ]; then
            FAILED_NAMES_JSON=$(printf '%s\n' "${FAILED_TEST_NAMES[@]}" | jq -R . | jq -s .)
            echo "failed_test_names=$FAILED_NAMES_JSON" >> $GITHUB_OUTPUT
          else
            echo "failed_test_names=[]" >> $GITHUB_OUTPUT
          fi
          echo "error_details=$ERROR_DETAILS" >> $GITHUB_OUTPUT
          echo "test_logs=$TEST_LOGS" >> $GITHUB_OUTPUT
          
          # Exit with error since tests failed
          exit 1

      - name: Notify YouTrack TMS
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔔 Notifying YouTrack TMS about unit test results...');
            
            // Determine the correct status based on test results
            const testStepOutcome = '${{ steps.unit_tests.outcome }}';
            const failedTests = '${{ steps.unit_tests.outputs.failed_tests }}';
            let testStatus = 'success';
            
            if (testStepOutcome === 'failure' || (failedTests && parseInt(failedTests) > 0)) {
              testStatus = 'failure';
            }
            
            const body = {
              repository: process.env.GITHUB_REPOSITORY,
              run_id: process.env.GITHUB_RUN_ID,
              status: testStatus,
              event: process.env.GITHUB_EVENT_NAME,
              triggerSource: '${{ github.event.inputs.triggerSource }}',
              testCaseId: '${{ github.event.inputs.testCaseId }}',
              testRunId: '${{ github.event.inputs.testRunId }}',
              timestamp: new Date().toISOString()
            };

            // Add comprehensive test results
            const totalTests = '${{ steps.unit_tests.outputs.total_tests }}';
            if (totalTests) {
              const passedTests = '${{ steps.unit_tests.outputs.passed_tests }}';
              const failedTests = '${{ steps.unit_tests.outputs.failed_tests }}';
              const successRate = '${{ steps.unit_tests.outputs.success_rate }}';
              
              body.testResults = {
                total: parseInt(totalTests),
                passed: parseInt(passedTests),
                failed: parseInt(failedTests),
                successRate: parseInt(successRate)
              };
              
              // Add failed test names
              const failedTestNames = '${{ steps.unit_tests.outputs.failed_test_names }}';
              if (failedTestNames && failedTestNames !== '[]' && failedTestNames.trim() !== '') {
                try {
                  body.testResults.failedTests = JSON.parse(failedTestNames);
                } catch (e) {
                  console.warn('Failed to parse failed test names:', e);
                  console.warn('Raw failed test names value:', failedTestNames);
                }
              }
              
              // Add detailed error information
              const errorDetails = '${{ steps.unit_tests.outputs.error_details }}';
              if (errorDetails) {
                body.testResults.errorDetails = errorDetails;
              }
              
              // Add test logs
              const testLogs = '${{ steps.unit_tests.outputs.test_logs }}';
              if (testLogs) {
                body.testResults.logs = testLogs;
              }
            }

            console.log('📦 Webhook payload:', JSON.stringify(body, null, 2));

            try {
              const res = await fetch(process.env.CALLBACK_URL, {
                method: 'POST',
                headers: { 
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${process.env.YOUTRACK_TOKEN}`
                },
                body: JSON.stringify(body)
              });

              if (!res.ok) {
                const text = await res.text();
                console.error(`❌ Webhook failed: ${res.status} ${res.statusText} - ${text}`);
                core.setFailed(`Webhook failed: ${res.status} ${res.statusText} - ${text}`);
              } else {
                console.log('✅ Webhook delivered successfully to YouTrack TMS');
                const responseText = await res.text();
                console.log('📄 Response:', responseText);
              }
            } catch (error) {
              console.error(`💥 Webhook delivery error: ${error.message}`);
              core.setFailed(`Webhook delivery error: ${error.message}`);
            }
        env:
          CALLBACK_URL: ${{ secrets.WEBHOOK_URL }}
          YOUTRACK_TOKEN: ${{ secrets.YOUTRACK_TOKEN }}
