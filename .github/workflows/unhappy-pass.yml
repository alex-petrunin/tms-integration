name: Unhappy Pass Test for TMS

on:
  workflow_dispatch:
    inputs:
      triggerSource:
        description: "Source of trigger (YT issue ID, test repo, etc.)"
        required: false
      testCaseId:
        description: "Original Test Case ID"
        required: true
      testRunId:
        description: "Test Run ID of a Test Case"
        required: true

jobs:
  auto-fail-test:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Show test context
        run: |
          echo "üß™ Auto-Fail Test Starting..."
          echo "Test Case ID: ${{ github.event.inputs.testCaseId }}"
          echo "Test Run ID: ${{ github.event.inputs.testRunId }}"
          echo "Trigger Source: ${{ github.event.inputs.triggerSource }}"
          echo "Repository: ${{ github.repository }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Run failing tests
        run: |
          echo "üöÄ Starting test execution..."
          echo "Setting up test environment..."
          sleep 1
          
          echo "Running test suite..."
          echo "‚úÖ Test 1: User authentication - PASSED"
          echo "‚úÖ Test 2: Data validation - PASSED"
          echo "‚úÖ Test 3: API endpoints - PASSED"
          sleep 1
          
          echo "‚ùå Test 4: Critical business logic - FAILED"
          echo "   Expected: user.isActive = true"
          echo "   Actual: user.isActive = false"
          echo "   AssertionError: User should be active after registration"
          
          echo "‚ùå Test 5: Integration test - FAILED"
          echo "   Error: Connection timeout to external service"
          echo "   Details: Unable to connect to payment gateway after 30 seconds"
          
          echo ""
          echo "üìä Test Results Summary:"
          echo "   Total: 5 tests"
          echo "   Passed: 3"
          echo "   Failed: 2"
          echo "   Success Rate: 60%"
          echo ""
          echo "üí• Test suite failed - 2 critical failures detected"
          
          # Always exit with failure
          exit 1

      - name: Notify YouTrack TMS App
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîî Notifying YouTrack TMS App about test results...');
            
            const body = {
              repository: process.env.GITHUB_REPOSITORY,
              run_id: process.env.GITHUB_RUN_ID,
              status: '${{ job.status }}',
              event: process.env.GITHUB_EVENT_NAME,
              triggerSource: '${{ github.event.inputs.triggerSource }}',
              testCaseId: '${{ github.event.inputs.testCaseId }}',
              testRunId: '${{ github.event.inputs.testRunId }}',
              timestamp: new Date().toISOString(),
              // Additional test result metadata
              testResults: {
                total: 5,
                passed: 3,
                failed: 2,
                successRate: 60,
                failedTests: [
                  'Critical business logic test',
                  'Integration test - payment gateway'
                ]
              }
            };

            console.log('üì¶ Webhook payload:', JSON.stringify(body, null, 2));

            try {
              const res = await fetch(process.env.CALLBACK_URL, {
                method: 'POST',
                headers: { 
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${process.env.YOUTRACK_TOKEN}`
                },
                body: JSON.stringify(body)
              });

              if (!res.ok) {
                const text = await res.text();
                console.error(`‚ùå Webhook failed: ${res.status} ${res.statusText} - ${text}`);
                core.setFailed(`Webhook failed: ${res.status} ${res.statusText} - ${text}`);
              } else {
                console.log('‚úÖ Webhook delivered successfully to YouTrack TMS');
                const responseText = await res.text();
                console.log('üìÑ Response:', responseText);
              }
            } catch (error) {
              console.error(`üí• Webhook delivery error: ${error.message}`);
              core.setFailed(`Webhook delivery error: ${error.message}`);
            }
        env:
          CALLBACK_URL: ${{ secrets.WEBHOOK_URL }}
          YOUTRACK_TOKEN: ${{ secrets.YOUTRACK_TOKEN }}
